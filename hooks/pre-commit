#!/usr/bin/env bash
# Pre-commit hook:
# - Blocks "TODO" in staged changes
# - Auto-fixes imports (isort) and formatting (black) for STAGED .py files only
# - Re-stages formatted files
# - Lints with flake8
set -euo pipefail
IFS=$'\n\t'

echo "üîé Running pre-commit checks..."

# 1) Prefer running inside your local virtualenv if present
if [[ -f ".venv/bin/activate" ]]; then
  # shellcheck source=/dev/null
  source ".venv/bin/activate"
fi

# 2) Block TODOs in staged diff
if git diff --cached | grep -qi "TODO"; then
  echo "‚ùå Commit blocked: staged changes contain 'TODO'"
  exit 1
fi

# 3) Collect staged Python files (Added, Copied, Modified), null-delimited for safety
mapfile -d '' STAGED_PY_FILES < <(git diff --cached --name-only -z --diff-filter=ACM | grep -z -E '\.py$' || true)

if (( ${#STAGED_PY_FILES[@]} > 0 )); then
  echo "üì¶ isort (auto-fix imports on staged .py files)..."
  # isort will read config from pyproject.toml; no need to pass --profile black
  isort --quiet -- "${STAGED_PY_FILES[@]}"

  echo "üñ§ black (auto-fix formatting on staged .py files)..."
  black --quiet -- "${STAGED_PY_FILES[@]}"

  echo "üß∫ Re-staging formatted files..."
  git add -- "${STAGED_PY_FILES[@]}"
else
  echo "‚è≠  No staged Python files ‚Äî skipping isort/black."
fi

# 4) Lint (whole repo) if flake8 is available
if command -v flake8 >/dev/null 2>&1; then
  echo "üêç Running flake8..."
  flake8 .
else
  echo "‚ÑπÔ∏è flake8 not found; skipping Python lint step."
fi

echo "‚úÖ Pre-commit checks passed."
exit 0
